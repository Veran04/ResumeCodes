import java.util.*;



//import com.sun.org.apache.xml.internal.security.utils.HelperNodeList;


public class Santa implements Runnable {

	enum SantaState {SLEEPING, READY_FOR_CHRISTMAS, WOKEN_UP_BY_ELVES, WOKEN_UP_BY_REINDEER};
	private SantaState state;
	public boolean checkThread;
	private SantaScenario scenario;
	
	public Santa(SantaScenario scenario) {
		this.state = SantaState.SLEEPING;
		this.checkThread = true;
		this.scenario = scenario;
	}
	public void setState(SantaState state) {
		this.state = state;
	}
	
	
	@Override
	public void run() {
		while(checkThread == true) {
			// wait a day...
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			switch(state) {
			case SLEEPING: // if sleeping, continue to sleep
					ListIterator<Elf> litr = scenario.elves.listIterator();
					while(litr.hasNext()) {
				         Elf elf = (Elf) litr.next();
				         if(elf.getState().equals(Elf.ElfState.AT_SANTAS_DOOR)) {
				        	 state = SantaState.WOKEN_UP_BY_ELVES;
				         }
				      }
				break;
				
			case WOKEN_UP_BY_ELVES: 
				litr = scenario.elves.listIterator();
				while(litr.hasNext()) {
			         Elf elf = (Elf) litr.next();
			         if(elf.getState().equals(Elf.ElfState.AT_SANTAS_DOOR)) {
			        	 elf.setState(Elf.ElfState.WORKING);
			        	 elf.sema.release();
			         }
			      }
				state= SantaState.SLEEPING;
				break;
			case WOKEN_UP_BY_REINDEER: 
				// FIXME: assemble the reindeer to the sleigh then change state to ready 
				break;
			case READY_FOR_CHRISTMAS: // nothing more to be done
				break;
			}
		}
	}

	
	/**
	 * Report about my state
	 */
	public void report() {
		System.out.println("Santa : " + state);
	}
	
	
}
